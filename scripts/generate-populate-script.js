#!/usr/bin/env node
import fs from 'fs';
import path from 'path';

const EXCLUDE = ['node_modules', '.git', 'populate_files.sh'];

function isValidFile(filePath) {
  // Check if it's a file and not excluded
  try {
    return (
      fs.statSync(filePath).isFile() &&
      !EXCLUDE.some(excluded => filePath.includes(excluded))
    );
  } catch {
    return false;
  }
}

function getFiles(dir) {
  let files = [];
  fs.readdirSync(dir).forEach(file => {
    const filePath = path.join(dir, file);
    if (fs.statSync(filePath).isDirectory()) {
      files = [...files, ...getFiles(filePath)]; // Recursive directory scan
    } else if (isValidFile(filePath)) {
      files.push(path.relative(process.cwd(), filePath)); // Relative path from project root
    }
  });
  return files;
}

const files = getFiles(process.cwd());
const scriptContent = `#!/bin/bash
# Auto-generated by generate-populate-script.js on ${new Date()}
# Project setup script for job-seeker-ai

${files.map(file => {
  const content = fs.readFileSync(file, 'utf8')
    .replace(/\$/g, '\\$')
    .replace(/`/g, '\\`');
  return `
# File: ${file}
mkdir -p "\${0%/*}/${path.dirname(file)}"
cat << 'EOF' > "\${0%/*}/${file}"
${content}
EOF`;
}).join('\n\n')}
`;

fs.writeFileSync('populate_files.sh', scriptContent);
fs.chmodSync('populate_files.sh', 0o755);
console.log('âœ… Updated populate_files.sh with latest project files');